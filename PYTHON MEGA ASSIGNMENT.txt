## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?
   - Python is a object oriented language. object orient means this langauge is based around objects and high level means its easy for humans to understand

Q2. Why is Python called a dynamically typed language?
   - its defined as dynamic language because the type of variable is determined only during run time

Q3. List some pros and cons of Python programming language?
    Pros :
     easy to learn and read
     it has vast collection of libraries
  cons :
     its slow speed
     weak in mobile computing

Q4. In what all domains can we use Python?
     - machine learning , data analytics , web development, game development

Q5. What are variable and how can we declare them?
     -- name given to a memeory location is called variable
    - to declare a variable in python just name the variable and assign required value to it

Q6. How can we take an input from the user in Python?
    - - input () is the function used to get input value

Q7. What is the default datatype of the value that has been taken as an input using input() function?
     -- the default datatype will return as a string

Q8. What is type casting?
    - - the method to convert the variable data type into a certain data type in order to the operation required to be performed by users

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
    - -  we can take multiple inputs from python using the split()  and map () methods

Q10. What are keywords?
    - - Python keywords are special reserved words that have specific meanings and purposes and can't be used for anything but those specific purposes

Q11. Can we use keywords as a variable? Support your answer with reason.
     -  No key words cant be used in python as each of them have specific meanings

Q12. What is indentation? What's the use of indentaion in Python?
    - - Indentation refers to the spaces at the beginning of a code line, Python uses indentation to indicate a block of code.

Q13. How can we throw some output in Python?
    - -using print command

Q14. What are operators in Python?
     - - Operators are special symbols in Python that carry out arithmetic or logical computation

Q15. What is difference between / and // operators?
    - - / - float division - divides left hand operand by right hand
 - // -floor division - where is the result is quotient 
    

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron

```

print("iNeuroniNeuroniNeuroniNeuron")

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
 num=int(input ("enter the no"))
if (num % 2) == 0 :
    print ("even")
else:
     print ("odd")

Q18. What are boolean operator?
- The logical operators and, or and not are also referred to as boolean operators

Q19. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```

Q20. What are conditional statements in Python?
 - - conditional statements are decision based conditions in python

Q21. What is use of 'if', 'elif' and 'else' keywords?
- if command is used to check a condition and provide an execution
   - elif also called as else if its the  next set of conditions used when if condition fails
   - else is executed when else conditions fails

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".

age  = input("enter the age:")
if age >= 18:
    print("I can vote")
elif age < 18:
    print("I can't vote")

Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```


Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.

numbers = [12, 75, 150, 180, 145, 525, 50]
result = 0
for i in numbers:
    if not i % 2:
        result += i

print(result)

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]

```

a = int(input('Enter first number  : '))
b = int(input('Enter second number : '))
c = int(input('Enter third number  : '))

largest = 0

if a > b and a > c:
    largest = a
if b > a and b > c:
    largest = b
if c > a and c > b:
    largest = c

Q26. What is a string? How can we declare string in Python?

-Strings are sequences of characters. Your name can be considered a string. Or, say you live in Zambia, then your country name is "Zambia", which is a string.
-To create a string, put the sequence of characters inside either single quotes, double quotes, or triple quotes and then assign it to a variable.

Q27. How can we access the string using its index?

- Individual characters in a string can be accessed by specifying the string name followed by a number in square brackets ( [] ). String indexing in Python is zero-based: the first character in the string has index 0 , the next has index 1 , and so on.

Q28. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "iNeuron"
```

my_str = 'Big Data iNeuron'
print(my_str[-7:])

Q29. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "norueNi"
```

string = "Big Data iNeuron"
print(string[:-8:-1])

Q30. Resverse the string given in the above question.

string = "Big Data iNeuron"
print(string[::-1])

Q31. How can you delete entire string at once?
-Python will not allow deleting a particular character in a string. Whereas you can remove the entire string variable using the del command

Q32. What is escape sequence?

- An escape sequence is a sequence of characters that, when used inside a character or string, does not represent itself but is converted into another character or series of characters

Q33. How can you print the below string?
```
'iNeuron's Big Data Course'

```
print(" 'iNeuron's Big Data Course' ")

Q34. What is a list in Python?
- List. Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data

Q35. How can you create a list in Python?
- In Python, a list is created by placing elements inside square brackets [] , separated by commas

Q36. How can we access the elements in a list?
- The syntax for accessing the elements of a list is the same as the syntax for accessing the characters of a string. We use the index operator ( [] â€“ not to be confused with an empty list). The expression inside the brackets specifies the index

Q37. Write a code to access the word "iNeuron" from the given list.
```
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
``` 

my_list = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print(my_list[4][2])

Q38. Take a list as an input from the user and find the length of the list.

# creating an empty list
lst = []
  
# number of elements as input
n = int(input("Enter number of elements : "))
  
# iterating till the range
for i in range(0, n):
    ele = int(input())
  
    lst.append(ele) # adding the element
      
print(lst)

Q39. Add the word "Big" in the 3rd index of the given list.
```
lst = ["Welcome", "to", "Data", "course"]

```
lis = ["Welcome", "to", "Data", "course"]
lis.insert(2, "Big")
print(lis)

Q40. What is a tuple? How is it different from list?
 - Tuples are used to store multiple items in a single variable, The primary difference between tuples and lists is that tuples are immutable as opposed to lists which are mutable

Q41. How can you create a tuple in Python?
- A tuple in Python can be created by enclosing all the comma-separated elements inside the parenthesis ()

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
- my_tuple = ("ranjith")
print(my_tuple) - yes we are able to add tuple to the value

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
- You can't add elements to a tuple because of their immutable property

Q44. Take a tuple as an input and print the count of elements in it.
- tuple1, tuple2 = (123, 'xyz', 'zara')
print "First tuple length : ", len(tuple1)

Q45. What are sets in Python?
- Sets are used to store multiple items in a single variable

Q46. How can you create a set?
-  A set is created by placing all the items (elements) inside curly braces {} , separated by comma

Q47. Create a set and add "iNeuron" in your set.
-nameSet = {"John", "Jane", "Doe"}
-nameSet.add("iNeuron")

Q48. Try to add multiple values using add() function.
- To append a multiple values to a list, we can use the built-in extend() method in Python

Q49. How is update() different from add()?

- add() function add a single element to the set, whereas update() function iterates over the given sequences and adds them to the set

Q50. What is clear() in sets?
- The clear() method removes all elements from the set

Q51. What is frozen set?
- Python frozenset() Method creates an immutable Set object from an iterable. It is a built-in Python function. As it is a set object therefore we cannot have duplicate values in the frozenset.

Q52. How is frozen set different from set?
- Frozenset is similar to set in Python, except that frozensets are immutable, which implies that once generated, elements from the frozenset cannot be added or removed. This function accepts any iterable object as input and transforms it into an immutable object.

Q53. What is union() in sets? Explain via code.
- Union of two given sets is the smallest set which contains all the elements of both the sets

Q54. What is intersection() in sets? Explain via code.
- The intersection of sets can be denoted using the symbol 'âˆ©'. As defined above, the intersection of two sets A and B is the set of all those elements which are common to both A and B

Q55. What is dictionary ibn Python?
- Dictionaries are used to store data values in key:value pairs

Q56. How is dictionary different from all other data structures.
- A dictionary is a general-purpose data structure for storing a group of objects. A dictionary has a set of keys and each key has a single associated value. When presented with a key the dictionary will â€¢ A dictionary has a set of keys and each key has a single associated value.

Q57. How can we delare a dictionary in Python?

- Dictionary holds key:value pair. Key-Value is provided in the dictionary to make it more optimized.
- Dict = {1: 'Geeks', 2: 'For', 3: 'Geeks'}
print(Dict) 

Q58. What will the output of the following?
```
var = {}
print(type(var))

- <class 'dict'>
```

Q59. How can we add an element in a dictionary?

- There is no add() , append() , or insert() method you can use to add an item to a dictionary in Python. Instead, you add an item to a dictionary by inserting a new index key into the dictionary, then assigning it a particular value

Q60. Create a dictionary and access all the values in that dictionary.

# Creating a Dictionary
Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}
  
# accessing a element using key
print("Accessing a element using key:")
print(Dict['name'])

Q61. Create a nested dictionary and access all the element in the inner dictionary.

people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},
          2: {'name': 'Marie', 'age': '22', 'sex': 'Female'}}

print(people[1]['name'])
print(people[1]['age'])
print(people[1]['sex'])

Q62. What is the use of get() function?

- Python find() function is used to return the lowest index value of the first occurrence of the substring from the input string; else it returns -1

Q63. What is the use of items() function?
- The items() method returns a view object. The view object contains the key-value pairs of the dictionary

Q64. What is the use of pop() function?
- The pop() method removes the element at the specified position.

Q65. What is the use of popitems() function?
- The popitem() method removes the item that was last inserted into the dictionary

Q66. What is the use of keys() function?
- The keys() method in Python Dictionary, returns a view object that displays a list of all the keys in the dictionary in order of insertion using Python

Q67. What is the use of values() function?
- values() is an inbuilt method in Python programming language that returns a view object.

Q68. What are loops in Python?
- Looping means repeating something over and over until a particular condition is satisfied.

Q69. How many type of loop are there in Python?
- There are two types of loops in Python, for and while.

Q70. What is the difference between for and while loops?
- For loop is used when the number of iterations is already known. While loop is used when the number of iterations is already Unknown

Q71. What is the use of continue statement?
- The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration

Q72. What is the use of break statement?
- Break' in Python is a loop control statement. It is used to control the sequence of the loop. Suppose you want to terminate a loop and skip to the next code after the loop; break will help you do that

Q73. What is the use of pass statement?
- The pass statement is used as a placeholder for future code. When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed. Empty code is not allowed in loops, function definitions

Q74. What is the use of range() function?
- The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.

Q75. How can you loop over a dictionary?
- You can loop through a dictionary by using a for loop.


### Coding problems
Q76. Write a Python program to find the factorial of a given number.
# Python code to demonstrate naive method
# to compute factorial
n = 23
fact = 1
  
for i in range(1,n+1):
    fact = fact * i
      
print ("The factorial of 23 is :",end="")
print (fact)

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (P*R*T)/100

# Python3 program to find simple interest
# for given principal amount, time and
# rate of interest.
  
  
def simple_interest(p,t,r):
    print('The principal is', p)
    print('The time period is', t)
    print('The rate of interest is',r)
      
    si = (p * t * r)/100
      
    print('The Simple Interest is', si)
    return si
      
# Driver code
simple_interest(8, 6, 8)

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

# Python3 program to find compound
# interest for given values.
 
def compound_interest(principle, rate, time):
 
    # Calculates compound interest
    Amount = principle * (pow((1 + rate / 100), time))
    CI = Amount - principle
    print("Compound interest is", CI)
 
# Driver Code
compound_interest(10000, 10.25, 5)
 

Q79. Write a Python program to check if a number is prime or not.
// C program for
// checking if a number is prime
#include <stdio.h>
int main()
{
    int i,v=1;
    int a = 1;
    // iterate through 2 to a/2
    for (i=2;i<=a/2;i++)
      {
          v = a%i;
      // if remainder is zero, the number is not prime
          if(v==0)
            break;
      }
    if (v==0 || a==1)
      printf("%d is not prime number",a);
    else
      printf("%d is prime number",a);
}





Q80. Write a Python program to check Armstrong Number.

# Python program to determine whether
# the number is Armstrong number or not
  
# Function to calculate x raised to 
# the power y
def power(x, y):
      
    if y == 0:
        return 1
    if y % 2 == 0:
        return power(x, y // 2) * power(x, y // 2)
          
    return x * power(x, y // 2) * power(x, y // 2)
  
# Function to calculate order of the number
def order(x):
  
    # Variable to store of the number
    n = 0
    while (x != 0):
        n = n + 1
        x = x // 10
          
    return n
  
# Function to check whether the given 
# number is Armstrong number or not
def isArmstrong(x):
      
    n = order(x)
    temp = x
    sum1 = 0
      
    while (temp != 0):
        r = temp % 10
        sum1 = sum1 + power(r, n)
        temp = temp // 10
  
    # If condition satisfies
    return (sum1 == x)
  
# Driver code
x = 153
print(isArmstrong(x))
  
x = 1253
print(isArmstrong(x))

Q81. Write a Python program to find the n-th Fibonacci Number.

# Function for nth Fibonacci number
 
def Fibonacci(n):
    if n<= 0:
        print("Incorrect input")
    # First Fibonacci number is 0
    elif n == 1:
        return 0
    # Second Fibonacci number is 1
    elif n == 2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)
 
# Driver Program
 
print(Fibonacci(10))
 


Q82. Write a Python program to interchange the first and last element in a list.

# Python3 program to swap first
# and last element of a list
 
# Swap function
def swapList(newList):
    size = len(newList)
     
    # Swapping
    temp = newList[0]
    newList[0] = newList[size - 1]
    newList[size - 1] = temp
     
    return newList
     
# Driver code
newList = [12, 35, 9, 56, 24]
 
print(swapList(newList))

Q83. Write a Python program to swap two elements in a list.
# Python3 program to swap elements
# at given positions
 
# Swap function
def swapPositions(list, pos1, pos2):
     
    list[pos1], list[pos2] = list[pos2], list[pos1]
    return list
 
# Driver function
List = [23, 65, 19, 90]
pos1, pos2  = 1, 3
 
print(swapPositions(List, pos1-1, pos2-1))

Q84. Write a Python program to find N largest element from a list.
# Python program to find N largest
# element from given list of integers
  
# Function returns N largest elements
def Nmaxelements(list1, N):
    final_list = []
  
    for i in range(0, N): 
        max1 = 0
          
        for j in range(len(list1)):     
            if list1[j]> max1:
                max1 = list1[j];
                  
        list1.remove(max1);
        final_list.append(max1)
          
    print(final_list)
  
# Driver code
list1 = [2, 6, 41, 85, 0, 3, 7, 6, 10]
N = 2
  
# Calling the function
Nmaxelements(list1, N)

Q85. Write a Python program to find cumulative sum of a list.

# Python code to get the Cumulative sum of a list
def Cumulative(lists):
    cu_list = []
    length = len(lists)
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)]
    return cu_list[1:]
 
# Driver Code
lists = [10, 20, 30, 40, 50]
print (Cumulative(lists))

Q86. Write a Python program to check if a string is palindrome or not.

# function which return reverse of a string
 
def isPalindrome(s):
    return s == s[::-1]
 
 
# Driver code
s ="malayalam"
ans = isPalindrome(s)
 
if ans:
    print("Yes")
else:
    print("No")

Q87. Write a Python program to remove i'th element from a string.

# Python code to demonstrate
# method to remove i'th character
# Naive Method
  
# Initializing String 
test_str ="GeeksForGeeks"
  
# Printing original string 
print ("The original string is :"+ test_str)
  
# Removing char at pos 3
# using loop
new_str =""
  
for i in range(len(test_str)):
    if i != 2:
        new_str = new_str + test_str[i]
  
# Printing string after removal  
print ("The string after removal of i'th character :"+ new_str)

Q88. Write a Python program to check if a substring is present in a given string.
# function to check if small string is 
# there in big string
def check(string, sub_str):
    if (string.find(sub_str) == -1):
        print("NO")
    else:
        print("YES")
            
# driver code
string ="geeks for geeks"
sub_str ="geek"
check(string, sub_str)

Q89. Write a Python program to find words which are greater than given length k.

# Python program to find words which are greater 
# than given length k

# Getting input from user 
myStr =  input('Enter the string : ')
k = int(input('Enter k  (value for accepting string) : '))
largerStrings = []

# Finding words with length greater than k
words = myStr.split(" ")
for word in words:
	if len(word) > k:
		largerStrings.append(word)
		
# printing values
print("All words which are greater than given length ", k, "are ", largerStrings)


Q90. Write a Python program to extract unquire dictionary values.

# Python3 code to demonstrate working of 
# Extract Unique values dictionary values
# Using set comprehension + values() + sorted()
  
# initializing dictionary
test_dict = {'gfg': [5, 6, 7, 8],
            'is': [10, 11, 7, 5],
            'best': [6, 12, 10, 8],
            'for': [1, 2, 5]}
  
# printing original dictionary
print("The original dictionary is :"+ str(test_dict))
  
# Extract Unique values dictionary values
# Using set comprehension + values() + sorted()
res = list(sorted({ele for val in test_dict.values() for ele in val}))
  
# printing result 
print("The unique values list is :"+ str(res)) 

Q91. Write a Python program to merge two dictionary.

# Python code to merge dict using update() method
def Merge(dict1, dict2):
    return(dict2.update(dict1))
     
# Driver code
dict1 = {'a': 10,'b': 8}
dict2 = {'d': 6,'c': 4}
 
# This return None
print(Merge(dict1, dict2))
 
# changes made in dict2
print(dict2)

Q92. Write a Python program to convert a list of tuples into dictionary.
```
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}

```

def Convert(tup, di):
    for a, b in tup:
        di.setdefault(a, []).append(b)
    return di
      
# Driver Code    
tups = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
dictionary = {}
print (Convert(tups, dictionary))

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
```
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]

```

list1 = [9,5,6]
  
# using list comprehension to iterate each
# values in list and create a tuple as specified
res = [(val, pow(val, 3)) for val in list1]
  
# print the result
print(res)

Q94. Write a Python program to get all combinations of 2 tuples.
```
Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]

```

# initializing tuples
test_tuple1 = (7, 2)
test_tuple2 = (7, 8)
  
# printing original tuples
print("The original tuple 1 :"+ str(test_tuple1))
print("The original tuple 2 :"+ str(test_tuple2))
  
# All pair combinations of 2 tuples
# Using list comprehension
res =  [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1]
  
# printing result 
print("The filtered tuple :"+ str(res))

Q95. Write a Python program to sort a list of tuples by second item.
```
Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]

```

def Sort_Tuple(tup): 
      
    # getting length of list of tuples
    lst = len(tup) 
    for i in range(0, lst): 
          
        for j in range(0, lst-i-1): 
            if (tup[j][1]> tup[j + 1][1]): 
                temp = tup[j] 
                tup[j]= tup[j + 1] 
                tup[j + 1]= temp 
    return tup 
  
# Driver Code 
tup =[('for', 24), ('Geeks', 8), ('Geeks', 30)] 
        
print(Sort_Tuple(tup))


Q96. Write a python program to print below pattern.
```
* 
* * 
* * * 
* * * * 
* * * * * 
```

def pypart(n):
     
    # outer loop to handle number of rows
    # n in this case
    for i in range(0, n):
     
        # inner loop to handle number of columns
        # values changing acc. to outer loop
        for j in range(0, i+1):
         
            # printing stars
            print("*",end="")
      
        # ending line after each row
        print("\r")
 
# Driver Code
n = 5
pypart(n)

Q97. Write a python program to print below pattern.
```
    *
   **
  ***
 ****
*****
```

# number of rows
rows = 5
k = 2 * rows - 2
for i in range(0, rows):
    # process each column
    for j in range(0, k):
        # print space in pyramid
        print(end=" ")
    k = k - 2
    for j in range(0, i + 1):
        # display star
        print("* ", end="")
    print("")


Q98. Write a python program to print below pattern.
```
    * 
   * * 
  * * * 
 * * * * 
* * * * * 
```

print("Print equilateral triangle Pyramid using asterisk symbol ")
# printing full Triangle pyramid using stars
size = 7
m = (2 * size) - 2
for i in range(0, size):
    for j in range(0, m):
        print(end=" ")
    # decrementing m after each loop
    m = m - 1
    for j in range(0, i + 1):
        print("* ", end=' ')
    print(" ")


Q99. Write a python program to print below pattern.
```
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5

```

rows = 6
# if you want user to enter a number, uncomment the below line
# rows = int(input('Enter the number of rows'))
# outer loop
for i in range(rows):
    # nested loop
    for j in range(i):
        # display number
        print(i, end=' ')
    # new line after each row
    print('')


Q100. Write a python program to print below pattern.
```
A 
B B 
C C C 
D D D D 
E E E E E 
```

n = 5
for i in range(1,n+1):
    V = 97
    for j in range(1, i+1):
        print(chr(V), end="")
        V += 1
    print()
